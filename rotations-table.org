* Introduction
This file describes some mechanisms needed to store the state of the cube for the game Cube of The Words (COTW).
It describes the mechanisms and data necessary to save the cube orientation and be able to use it for the gameplay.

* Rotations table
The rotations table is a table that describes the rotation state of the cube before applying a new rotation, and the final result of applying the new rotation, so the stored rotations can be simplified, because there are many equivalent rotations that leave the cube with the same orientation.

The convention that has been followed is to consider four type or rotations:
- positive on X axis: +x
- negative on X axis: -x
- positive on Z axis: +z
- negative on Z axis: -z

It is assumed that the starting position begins with no rotation applied to the cube.
So the initial state is of no-rotation, also expressed as i in the table.

** Explanation of terms used in the table
The first row of the table shows the possible values for the next rotation, i.e.: +x, -x, +z or -z.
+x means rotation on the X axis following the right hand rule, so Y x Z = +x, and in the same manner Z x Y = -x
(Y x Z is the cross-product of the vectors).

The first column, indicates the current state of rotations of the cube, before applying the next rotation.

The intersection of the first row and first column, gives us the resulting rotation state.
Have a look at the following tables for better understanding.
For example, if state is +x and the next rotation is -z the resulting rotation state is +x-z.

A resulting value of i, denotes that the resulting state is of no-rotation from the initial position.

** IN-PROGRESS Write a program to generate that table
*** DONE First iteration:
Start COMBINING +x,-x,+z,-z with +x,-x,+z,-z; and if +x-x, -x+x, +z-z or -z+z is found, set to i.
This iteration will give a result combination with a size of 2 rotation each.
Iteration result table:
| state    | +x       | -x       | +z       | -z       |
+----------+----------+----------+----------+----------+
| i        | +x       | -x       | +z       | -z       |
| +x       | +x+x     | i        | +x+z     | +x-z     |
| -x       | i        | -x-x     | -x+z     | -x-z     |
| +z       | +z+x     | +z-x     | +z+z     | i        |
| -z       | -z+x     | -z-x     | i        | -z-z     |

Total: 1 + 4 rows

Also +x+x is equivalent to -x-x and +z+z is equivalent to -z-z.
So, -x-x and -z-z won't be included as initial states.

*** DONE Second iteration:
Taking the results from the first iteration, DISCARD the i entries.
Then COMBINE them again with +x,-x,+z,-z.

Now, SIMPLIFY the resulting combination:

+ Trimming: if +x-x, -x+x, +z-z or -z+z are found in any item, then TRIM that part from each result.

+ Equivalences: one rotation is equivalent to other, if it leaves the cube in the same faces orientation.

   - For example, +x+x+x is equivalent to +x, and -x-x-x is equivalent to +x.
     The equivalences of this type will be SIMPLIFIED, and discarded on next iteration.
     #+begin_example
       +x+x+x = -x
       -x-x-x = +x
       +z+z+z = -z
       -z-z-z = +z
     #+end_example
          
   - Also, +x+x+z is equivalent to -x-x+z and there are others with similar pattern.
     The equivalences of this type will be MARKED with D at the end, and discarded on next iteration.
     #+begin_example
       +x+x+z = -x-x+z
       +x+x-z = -x-x-z
       +z+z+x = -z-z+x
       +z+z-x = -z-z-x
     #+end_example
     
   - +x+z+x is equivalent to -x-z-x and +x-z+x is equivalent to -x+z-x and others with similar patterns.
     The equivalences of this type will be MARKED with D at the end, and discarded on next iteration.
     #+begin_example
       +x+z+x = -x-z-x
       +x+z-x = -x-z+x
       +x+z+z = +x-z-z
       +x-z+x = -x+z-x
       +x-z-x = -x+z+x
       -x+z+z = -x-z-z
       +z+x+x = +z-x-x
       +z+x+z = -z-x-z
       +z+x-z = -z-x+z
       +z-x+z = -z+x-z
       +z-x-z = -z+x+z
       -z+x+x = -z-x-x
     #+end_example
     
This iteration will give a result combination with a max size of 3 rotations each, some results with only 1 rotation and some duplicatd entries.
Iteration result table:
| state    | +x       | -x       | +z       | -z       |
+----------+----------+----------+----------+----------+
| +x+x     | -x       | +x       | +x+x+z   | +x+x-z   |
| +x+z     | +x+z+x   | +x+z-x   | +x+z+z   | +x       |
| +x-z     | +x-z+x   | +x-z-x   | +x       | +x+z+zD  |
| -x+z     | +x-z-xD  | +x-z+xD  | -x+z+z   | -x       |
| -x-z     | +x+z-xD  | +x+z+xD  | -x       | -x+z+zD  |
| +z+x     | +z+x+x   | +z       | +z+x+z   | +z+x-z   |
| +z-x     | +z       | +z+x+xD  | +z-x+z   | +z-x-z   |
| +z+z     | +z+z+x   | +z+z-x   | -z       | +z       |
| -z+x     | -z+x+x   | -z       | +z-x-zD  | +z-x+zD  |
| -z-x     | -z       | -z+x+xD  | +z+x-zD  | +z+x+zD  |

Total: 10 rows

*** IN-PROGRESS Third iteration
Take the result from the second iteration and DISCARD the entries that have less than 3 rotations.
Those will be the ones that have a size less than 6 chars, which have already been combined.
For example, in this case, it will discard, +x in first 12-chunk, -x in the second 12-chunk, etc...
Also, the duplicates won't be included.

Then again, COMBINE the resulting entries with +x,-x,+z,-z
This iteration will give a result combination with a max size of 4 rotations each.
Iteration result table:
| state    | +x       | -x       | +z       | -z       |
+----------+----------+----------+----------+----------+
| +x+x+z   | +x+x+z+x | +x+x+z-x | +x+x+z+z | +x+x     |
| +x+x-z   | +x+x-z+x | +x+x-z-x | +x+x     | +x+x-z-z |
| +x+z+x   | +x+z+x+x | +x+z     | +x+z+x+z | +x+z+x-z |
| +x+z-x   | +x+z     | +x+z-x-x | +x+z-x+z | +x+z-x-z |
| +x+z+z   | +x+z+z+x | +x+z+z-x | +x+z+z+z | +x+z     |
| +x-z+x   | +x-z+x+x | +x-z     | +x-z+x+z | +x-z+x-z |
| +x-z-x   | +x-z     | +x-z-x-x | +x-z-x+z | +x-z-x-z |
| -x+z+z   | -x+z+z+x | -x+z+z-x | -x+z+z+z | -x+z     |
| +z+x+x   | +z+x+x+x | +z+x     | +z+x+x+z | +z+x+x-z |
| +z+x+z   | +z+x+z+x | +z+x+z-x | +z+x+z+z | +z+x     |
| +z+x-z   | +z+x-z+x | +z+x-z-x | +z+x     | +z+x-z-z |
| +z-x+z   | +z-x+z+x | +z-x+z-x | +z-x+z+z | +z-x     |
| +z-x-z   | +z-x-z+x | +z-x-z-x | +z-x     | +z-x-z-z |
| +z+z+x   | +z+z+x+x | +z+z     | +z+z+x+z | +z+z+x-z |
| +z+z-x   | +z+z     | +z+z-x-x | +z+z-x+z | +z+z-x-z |
| -z+x+x   | -z+x+x+x | -z+x     | -z+x+x+z | -z+x+x-z |

Total: 16 rows

Here there are also equivalences that will bring duplicates.
+ Equivalences:
  - +x+x+z+x is equivalent to -z-x
    +x+x+z-x is equivalent to -z+x
    etc...
    
  - +x+x+z+z is equivalent to +z+z+x+x and to +z+z-x-x
    +x+x-z+x?

| state    | +x       | -x       | +z       | -z       |
+----------+----------+----------+----------+----------+
| +x+x+z   | -z-x     | -z+x     | +x+x+z+z | +x+x     |

| +x+x-z   | +x+x-z+x | +x+x-z-x | +x+x     | +x+x-z-z |
| +x+z+x   | +x+z+x+x | +x+z     | +x+z+x+z | +x+z+x-z |
| +x+z-x   | +x+z     | +x+z-x-x | +x+z-x+z | +x+z-x-z |
| +x+z+z   | +x+z+z+x | +x+z+z-x | +x+z+z+z | +x+z     |
| +x-z+x   | +x-z+x+x | +x-z     | +x-z+x+z | +x-z+x-z |
| +x-z-x   | +x-z     | +x-z-x-x | +x-z-x+z | +x-z-x-z |
| -x+z+z   | -x+z+z+x | -x+z+z-x | -x+z+z+z | -x+z     |
| +z+x+x   | +z+x+x+x | +z+x     | +z+x+x+z | +z+x+x-z |
| +z+x+z   | +z+x+z+x | +z+x+z-x | +z+x+z+z | +z+x     |
| +z+x-z   | +z+x-z+x | +z+x-z-x | +z+x     | +z+x-z-z |
| +z-x+z   | +z-x+z+x | +z-x+z-x | +z-x+z+z | +z-x     |
| +z-x-z   | +z-x-z+x | +z-x-z-x | +z-x     | +z-x-z-z |
| +z+z+x   | +z+z+x+x | +z+z     | +z+z+x+z | +z+z+x-z |
| +z+z-x   | +z+z     | +z+z-x-x | +z+z-x+z | +z+z-x-z |
| -z+x+x   | -z+x+x+x | -z+x     | -z+x+x+z | -z+x+x-z |    


*** TODO Fourth iteration

** Old initial table crafted manually
|-----------------+----------+----------+----------+----------|
| current         | axis     | axis     | axis     | axis     |
| rotations state | +x       | -x       | +z       | -z       |
|-----------------+----------+----------+----------+----------|
| i               | +x       | -x       | +z       | -z       |
|                 |          |          |          |          |
| +x              | +x+x     | i        | +x+z     | x-z      |
| -x              | i        | -x-x     | -x+z     | -x-z     |
| +z              | +z+x     | +z-x     | +z+z     | i        |
| -z              | -z+x     | -z-x     | i        | -z-z     |
|                 |          |          |          |          |
| +x+x            | +x+x+x   | +x       | +x+x+z   | +x+x-z   |
| +x+z            | +x+z+x   | +x+z-x   | +x+z+z   | +x       |
| +x-z            | +x-z+x   | +x-z-x   | +x       | +x-z-z   |
| -x-x            | -x       | -x-x-x   | -x-x+z   | -x-x+z   |
| -x+z            | -x+z+x   | -x+z-x   | -x+z+z   | -x       |
| -x-z            | -x-z+x   | -x-z-x   | -x       | -x-z-z   |
| ...             |          |          |          |          |
|                 |          |          |          |          |
|                 |          |          |          |          |
| +x+x+x          | i        | +x+x     | +x+x+x+z | +x+x+x-z |
| +x+x+z          | +x+x+z+x | +x+x+z+x | +x+x+z+z | +x+x     |
| +x+x-z          | +x+x-z+x | +x+x-z-x | +x+x     | +x+x-z-z |
| +x+z+x          | +x+z+x+x | +x+z     | +x+z+x+z | +x+z+x-z |
| +x+z-x          | +x+z     | +x+z-x-x | +x+z-x+z | +x+z-x-z |
| +x+z+z          | +x+z+z+x | +x+z+z-x | +x+z+z+z | +x+z     |
| +x-z+x          | +x-z+x+x | +x-z     | +x-z+x+z | +x-z+x+z |
| +x-z-x          | +x-z     | +x-z-x-x | +x-z-x+z | +x-z-x-z |
| +x-z-z          | +x-z-z+x | +x-z-z-x | +x-z     | +x-z-z-z |
| ...             |          |          |          |          |
|                 |          |          |          |          |
|                 |          |          |          |          |


* Face on the ground
It is necessary to know the orientation of the faces of the cube to apply textures in the right way.
So first it is needed to follow a convention to later store it in the source code.

** Faces convention
The faces of the cube in the starting position, with respect to the x and z axes, are named as follows:
#+begin_example
T = TOP (face 1), F = FRONT (face 2), R = RIGHT (face 3) 
K = BACK (face 4), L = LEFT (face 5), M = BOTTOM (face 6) 

z <-----------------------------------+
         +---+             +---+      | 
         | K |             | 4 |      | 
     +---+---+---+     +---+---+---+  | 
     | L | T | R |     | 5 | 1 | 3 |  | 
     +---+---+---+     +---+---+---+  | 
         | F |             | 2 |      | 
         +---+             +---+      | 
         | M |             | 6 |      | 
         +---+             +---+      | 
                                      |
                                      V
                                      x

#+end_example

And this is the convention for the faces orientation with respect to x & z axis:
#+begin_example
U = up, R - right, D = down, L = left

ORIENTED_UP      ORIENTED_RIGHT     ORIENTED_DOWN      ORIENTED_LEFT
z <--------+     z <--------+       z <--------+       z <--------+
     |  ^  |          |     |            |     |            |     |
     |  |  |          | --> |            |  |  |            | <-- |
     |     |          |     |            |  V  |            |     |
     +-----+          +-----+            +-----+            +-----+
           |                |                  |                  |
           V                V                  V                  V
           x                x                  x                  x
#+end_example

** Touching Ground table
For the COTW game prototype, the first approach is to know which face is touching the ground, because it is the one that is going to pick up or release the words.

At the starting point, the BOTTOM face (M) is the one touching the ground, but after some rotations that can not be the case, so we need to keep track of which face is touching the ground.

Two fields are used to indicate which face is touching the ground, the face number and the face orientation.
So, at the starting position, the face touching the ground is number 6, oriented down, or *6D*.

Note: another approach could be to store face number and orientation that is opposite of the ground, which is more clear visually. Which we could also express with equivalences, 6D for the touching ground face is equivalent to 1U for the face facing the sky. We'll see how useful/clear it is in practice to use the ground table.

*** TG table contents
Starting value: 6D

| state | +x | -x | +z | -z |
|-------+----+----+----+----|
| i     | 5L | 3R | 4U | 2D |
| +x    | 1U | 6D | 4L | 2L |
| -x    | 6D | 1U | 4R | 2R |
| +z    | 5U | 3U | 1D | 6D |
| -z    | 5D | 3D | 6D | 6U |
| +x+x  | 3R | 5L | 4D | 2U |
| +x+z  | 1R | 6R | 3L | 5L |
| +x-z  | 1L | 6L | 5L | 3L |
| -x-x  | 3R | 5L | 4D | 2U |
| -x+z  | 6L | 1L | 5R | 3R |
| -x-z  | 6R | 1R | 3R | 5R |
| +z+x  | 2U | 4U | 1R | 6L |
| +z-x  | 4U | 2U | 1L | 6R |
| +z+z  | 5R | 3L | 2D | 4U |
| -z+x  | 4D | 2D | 6R | 1L |
| -z-x  | 2D | 4D | 6L | 1R |
| -z-z  | 5R | 3L | 2D | 4U |

| +x+x+z | +x+x+z+x | +x+x+z-x | +x+x+z+z | +x+x     |
| +x+x-z | +x+x-z+x | +x+x-z-x | +x+x     | +x+x-z-z |
| +x+z+x | +x+z+x+x | +x+z     | +x+z+x+z | +x+z+x-z |
| +x+z-x | +x+z     | +x+z-x-x | +x+z-x+z | +x+z-x-z |
| +x+z+z | +x+z+z+x | +x+z+z-x | +x+z+z+z | +x+z     |
| +x-z+x | +x-z+x+x | +x-z     | +x-z+x+z | +x-z+x-z |
| +x-z-x | +x-z     | +x-z-x-x | +x-z-x+z | +x-z-x-z |
| -x+z+z | -x+z+z+x | -x+z+z-x | -x+z+z+z | -x+z     |
| +z+x+x | +z+x+x+x | +z+x     | +z+x+x+z | +z+x+x-z |
| +z+x+z | +z+x+z+x | +z+x+z-x | +z+x+z+z | +z+x     |
| +z+x-z | +z+x-z+x | +z+x-z-x | +z+x     | +z+x-z-z |
| +z-x+z | +z-x+z+x | +z-x+z-x | +z-x+z+z | +z-x     |
| +z-x-z | +z-x-z+x | +z-x-z-x | +z-x     | +z-x-z-z |
| +z+z+x | +z+z+x+x | +z+z     | +z+z+x+z | +z+z+x-z |
| +z+z-x | +z+z     | +z+z-x-x | +z+z-x+z | +z+z-x-z |
| -z+x+x | -z+x+x+x | -z+x     | -z+x+x+z | -z+x+x-z |


** Faces equivalences
Another approach *could* be to store face number and orientation for the face that is opposite of the ground.
That is more clear visually, but let's see how useful/clear it is in practice to use the ground table.

We can name the "Touching Ground" face with TG, and the opposite "Looking Sky" face with LS.
So, TG 6D is equivalent to LS 1U, which we could express as TG6D = LS1U.

#+begin_src
  (add-to-list 'org-emphasis-alist
             '("*" (:foreground "red")
               ))

#+end_src

* Reference
https://www.euclideanspace.com/maths/discrete/groups/categorise/finite/cube/index.htm
